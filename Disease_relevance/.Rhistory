reshape2
installed.packages
installed.packages()
installed.packages(reshape2)
installed.packages(dplyr)
installed.packages("dplyr")
temp <- installed.packages()
View(temp)
library(openxlsx)
setwd("/Volumes/group-gc/Agatha/PreviousProjects/Organoid Transcriptomics/Organoid_Transcriptomics/AcceptedAnalysis(Net4)/Modules")
# Load the WGCNA package
library(WGCNA);
install.packages("WGCNA")
library(WGCNA)
install.packages(impute)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
install.packages("BiocManager")
BiocManager::install("preprocessCore")
install.packages("WGCNA")
library(WGCNA)
setwd("/Volumes/group-gc/Agatha/PreviousProjects/Organoid Transcriptomics/Organoid_Transcriptomics/AcceptedAnalysis(Net4)/Modules");
setwd("/Volumes/tgac_hpc_work/PreviousProjects/Organoid Transcriptomics/Organoid_Transcriptomics/AcceptedAnalysis(Net4)/Modules")
tpms <- read.csv(raw_file, sep = "\t")
raw_file <- "../Raw Data/TPMs/gene_TPM_AllTogether.txt"
tpms <- read.csv(raw_file, sep = "\t")
View(tpms)
# Remove stem samples
tpms <- tpms_raw %>% select(-c(Stem1, Stem3, Stem5))
library(dplyr)
# Remove stem samples
tpms <- tpms_raw %>% select(-c(Stem1, Stem3, Stem5))
# Normalised counts
tpms_raw <- read.csv(raw_file, sep = "\t")
# Remove stem samples
tpms <- tpms_raw %>% select(-c(Stem1, Stem3, Stem5))
View(tpms_raw)
View(tpms)
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms %>% tpms[rowSums(tpms==0)<7, ]
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms %>% tpms[rowSums(tpms<10)<7, ]
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms %>% tpms[rowSums(tpms==0)<7, ]
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms[rowSums(tpms==0)<7, ]
View(tpms)
# Normalised counts
tpms_raw <- read.csv(raw_file, sep = "\t")
# Remove stem samples
tpms <- tpms_raw %>% select(-c(Stem1, Stem3, Stem5))
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms[rowSums(tpms<10)<7, ]
# Normalised counts
tpms_raw <- read.csv(raw_file, sep = "\t")
# Remove stem samples
tpms <- tpms_raw %>% select(-c(Stem1, Stem3, Stem5))
# Remove genes with counts <10 in 90% of samples (7 or 8 / 8)
tpms <- tpms[rowSums(tpms==0)<7, ]
View(tpms)
tpms_l <- tpms[, 3:10] + 1
View(tpms_l)
tpms_l <- tpms,[1:2] + tpms[, 3:10] + 1
tpms_l <- tpms
tpms_l[,3:10] <- tpms[, 3:10] + 1
View(tpms_l)
View(tpms)
tpms_l <- tpms
tpms_l[,3:10] <- tpms[, 3:10] + 1
tpms_l[, 3:10] <- log2(tpms_l[3:10], 2)
tpms_l <- tpms
tpms_l[,3:10] <- tpms[, 3:10] + 1
tpms_l[, 3:10] <- log2(tpms_l[3:10])
View(tpms_l)
View(tpms)
View(tpms_l)
# Remove gene names and set ids as row names
row.names(tpms_l) <- tpms_l$X.gene_id
tpms_l <- tpms_l %>% select(-c(gene_name, X.gene_id))
View(tpms_l)
sampleTree = hclust(dist(tpms_l), method = "average");
setwd("/Volumes/Workarea/group-gc/Agatha/PreviousProjects/Organoid Transcriptomics/Organoid_Transcriptomics/AcceptedAnalysis(Net4)/PvC_GEvC/SmilliePaper")
# Load files
top100_degs <- read.csv(degs, sep = "\t")
# Input files
degs <- "goblet_inflammed_v_healthy_tableS4.txt"
regs <- c("GFI1B", "MYC", "ETS1", "NR3C1", "VDR")
# Load files
top100_degs <- read.csv(degs, sep = "\t")
# Input files
degs <- "from_paper/goblet_inflammed_v_healthy_tableS4.txt"
regs <- c("GFI1B", "MYC", "ETS1", "NR3C1", "VDR")
# Load files
top100_degs <- read.csv(degs, sep = "\t")
View(top100_degs)
# Load files
top100_degs <- read.csv(degs, sep = "\t", header=F)
# Input files
degs <- "from_paper/goblet_inflammed_v_healthy_tableS4.txt"
regs <- c("GFI1B", "MYC", "ETS1", "NR3C1", "VDR")
# Load files
top100_degs <- read.csv(degs, sep = "\t", header=F)
# Load files
top100_degs <- read.csv(degs, sep = "\t", header=T)
gob_net <- "../../organoid_regulatory_networks/Input_data/Gob_network_lfc1.txt"
degs_f <- "from_paper/goblet_inflammed_v_healthy_tableS4.txt"
regs <- c("GFI1B", "MYC", "ETS1", "NR3C1", "VDR")
gob_net_f <- "../../organoid_regulatory_networks/Input_data/Gob_network_lfc1.txt"
# Load files
top100_degs <- read.csv(degs_f, sep = "\t", header=T)
gob_net <- read.csv(gob_net_f, sep = "\t", header = T)
pwd
gob_net_f <- "../../../organoid_regulatory_networks/Input_data/Gob_network_lfc1.txt"
# Load files
top100_degs <- read.csv(degs_f, sep = "\t", header=T)
gob_net <- read.csv(gob_net_f, sep = "\t", header = T)
View(gob_net)
convert_f <- "../../organoid_regulatory_networks/Input_data/InParanoid-Mus-homo-UniprotEnsembl-May2018-expanded.txt"
convert <- read.csv(convert_f, sep = "\t", header = T)
convert_f <- "../../../organoid_regulatory_networks/Input_data/InParanoid-Mus-homo-UniprotEnsembl-May2018-expanded.txt"
convert <- read.csv(convert_f, sep = "\t", header = T)
View(convert)
View(top100_degs)
# Convert to degs to mouse ensembl
top100_degs <- left.join(top100_degs, convert, by = c("gene" = "human.gene.sym"))
libraries(dplyr)
library(dplyr)
# Convert to degs to mouse ensembl
top100_degs <- left.join(top100_degs, convert, by = c("gene" = "human.gene.sym"))
# Convert to degs to mouse ensembl
top100_degs <- left_join(top100_degs, convert, by = c("gene" = "human.gene.sym"))
# Convert to degs to mouse ensembl
top100_degs <- left_join(top100_degs, convert, by = c("gene" = "human.gene.syb"))
# Convert to degs to mouse ensembl
top100_degs <- left_join(top100_degs, convert, by = c("gene" = "Hum.gene.syb"))
View(top100_degs)
View(gob_net)
View(convert)
library(tidyr)
# Expand the conversion file for one human gene symbol per line
convert <- unnest(convert, cols = Hum.gene.syb)
# Expand the conversion file for one human gene symbol per line
convert_1 <- unnest(convert, cols = Hum.gene.syb)
# Expand the conversion file for one human gene symbol per line
convert_1 <- separate_rows(convert, Hum.gene.syb)
View(convert_1)
# Expand the conversion file for one human gene symbol per line
convert_1 <- separate_rows(convert, Hum.gene.syb, sep="; ")
View(convert_1)
# Convert to degs to mouse ensembl
top100_degs <- left_join(top100_degs, convert, by = c("gene" = "Hum.gene.syb"))
top100_degs_gene <- top100_degs %>% select(Mouse.Ensembl.y) %>%
filter(Hum.gene.syb != "-") %>% na.omit()
top100_degs_gene <- top100_degs %>% select(Mouse.Ensembl.y) %>%
filter(Mouse.Ensembl.y != "-") %>% na.omit()
View(top100_degs_gene)
top100_degs_gene <- top100_degs %>% select(Mouse.Ensembl.y) %>%
filter(Mouse.Ensembl.y != "-") %>% na.omit() %>% unique()
top100_degs_gene <- top100_degs %>% select(ident, Mouse.Ensembl.y) %>%
filter(Mouse.Ensembl.y != "-") %>% na.omit() %>% unique()
#regs <- c("GFI1B", "MYC", "ETS1", "NR3C1", "VDR")
regs <- c("ENSMUSG00000026815", "ENSMUSG00000022346", "ENSMUSG00000032035", "ENSMUSG00000024431", "ENSMUSG00000022479")
deg_regs <- gob_net %>% filter(target %in% top100_degs_gene$Mouse.Ensembl.y)
View(deg_regs)
# First extract all the regulators of the deg list
deg_regs <- gob_net %>% filter(target %in% top100_degs_gene$Mouse.Ensembl.y) %>% select(source)
# First extract all the regulators of the deg list
deg_regs <- gob_net %>% filter(target %in% top100_degs_gene$Mouse.Ensembl.y) %>% select(source) %>% unique()
View(deg_regs)
# Filter for those in the master regs list
deg_regs_master <- deg_regs %>% filter(source %in% regs)
View(deg_regs_master)
# Split the genes by goblet and immature goblet
top100_gene_gob <- top100_degs_gene %>% filter(ident == "Goblet")
View(top100_gene_gob)
top100_gene_gobim <- top100_degs_gene %>% filter(ident == "Immature Goblet")
View(top100_gene_gobim)
# First extract all the regulators of the deg list - total 50
deg_regs_gob <- gob_net %>% filter(target %in% top100_degs_gene$Mouse.Ensembl.y) %>% select(source) %>% unique()
deg_regs_gobim <- gob_net %>% filter(target %in% top100_degs_gene$Mouse.Ensembl.y) %>% select(source) %>% unique()
View(deg_regs_gob)
View(deg_regs_gobim)
diff <- deg_regs_gob %>% filter(!source %in% deg_reg_gobim$source )
diff <- deg_regs_gob %>% filter(!source %in% deg_regs_gobim$source )
View(diff)
# Filter for those in the master regs list - all 5 are in this list
deg_regs_master <- deg_regs_gob %>% filter(source %in% regs)
deg_regs_master <- deg_regs_gobim %>% filter(source %in% regs)
# Filter for those in the master regs list - all 5 are in this list
master_gob <- deg_regs_gob %>% filter(source %in% regs)
master_gobim <- deg_regs_gobim %>% filter(source %in% regs)
# Instead extract all targets of the 5 regualtors
master_tars <- gob_net %>% filter(source %in% regs)
View(master_tars)
# Instead extract all targets of the 5 regualtors
master_tars <- gob_net %>% filter(source %in% regs) %>% select(target) %>% unique()
View(master_tars)
# IBD genes from Smillie et al and from Jostins et al and Farh et al.
genes_f <- "../../Input_data/IBD_genes/goblet_inflammed_v_healthy_smillie_tableS4.txt"
# Load files
genes <- read.csv(genes_f, sep = "\t", header=T)
library(dplyr)
library(tidyr)
setwd("/Volumes/group-gc/Agatha/PreviousProjects/Organoid Transcriptomics/Organoid_Transcriptomics/organoid_regulatory_networks/Crohns_uc_genes_overlap")
# IBD genes from Smillie et al and from Jostins et al and Farh et al. Select just one to test
genes_f <- "../../Input_data/IBD_genes/goblet_inflammed_v_healthy_smillie_tableS4.txt"
# GceE and PCeE networks - select just the one you want to test
#net_f <- "../../Input_data/Pan_network_lfc1.txt"
net_f <- "../../Input_data/Gob_network_lfc1.txt"
# Human to mouse ID conversion table
convert_f <- "../../Input_data/InParanoid-Mus-homo-UniprotEnsembl-May2018-expanded.txt"
# Whole unfiltered network
background_f <- "../../Input_data/Known_interactions_unfiltered.txt"
# Predicted master regulators - select just one you want to test
# goblet
regs <- c("ENSMUSG00000026815", "ENSMUSG00000022346", "ENSMUSG00000032035", "ENSMUSG00000024431", "ENSMUSG00000022479")
# Name of input list and cell type for use in output filenames
out_text <- "UC_degs_goblet"
# Load files
genes <- read.csv(genes_f, sep = "\t", header=T)
net <- read.csv(net_f, sep = "\t", header = T)
convert <- read.csv(convert_f, sep = "\t", header = T)
# IBD genes from Smillie et al and from Jostins et al and Farh et al. Select just one to test
genes_f <- "../Input_data/IBD_genes/goblet_inflammed_v_healthy_smillie_tableS4.txt"
# GceE and PCeE networks - select just the one you want to test
#net_f <- "../Input_data/Pan_network_lfc1.txt"
net_f <- "../Input_data/Gob_network_lfc1.txt"
# Human to mouse ID conversion table
convert_f <- "../Input_data/InParanoid-Mus-homo-UniprotEnsembl-May2018-expanded.txt"
# Whole unfiltered network
background_f <- "../Input_data/Known_interactions_unfiltered.txt"
# Predicted master regulators - select just one you want to test
# goblet
regs <- c("ENSMUSG00000026815", "ENSMUSG00000022346", "ENSMUSG00000032035", "ENSMUSG00000024431", "ENSMUSG00000022479")
# Name of input list and cell type for use in output filenames
out_text <- "UC_degs_goblet"
# Load files
genes <- read.csv(genes_f, sep = "\t", header=T)
net <- read.csv(net_f, sep = "\t", header = T)
convert <- read.csv(convert_f, sep = "\t", header = T)
background <- read.csv(background_f, sep = "\t", header=T)
# Empty list to hold the output text
out_text <- c()
# Expand the conversion file for one human gene symbol per line
convert_1 <- separate_rows(convert, Hum.gene.syb, sep="; ")
# Get unique list of human input genes - different for degs and snps files
if ("ident" %in% colnames(genes)) {
degs <- left_join(degs, convert, by = c("gene" = "Hum.gene.syb"))
degs_gene <- degs %>% filter(Mouse.Ensembl != "-") %>%
filter(ident == "Goblet") %>% select(Mouse.Ensembl) %>%
na.omit() %>% unique()
} else {
genes1 <- genes %>% select(EnsemblID) %>% separate_rows(EnsemblID) %>% unique() %>% na.omit()
genes1 <- left_join(genes1, convert, by = c("EnsemblID" = "Human.Ensembl"))
genes1 <- genes1 %>% select(Mouse.Ensembl) %>% filter(Mouse.Ensembl != "") %>% na.omit() %>% unique()
}
# Get unique list of human input genes - different for degs and snps files
if ("ident" %in% colnames(genes)) {
genes <- left_join(genes, convert, by = c("gene" = "Hum.gene.syb"))
genes1 <- genes %>% filter(Mouse.Ensembl != "-") %>%
filter(ident == "Goblet") %>% select(Mouse.Ensembl) %>%
na.omit() %>% unique()
} else {
genes1 <- genes %>% select(EnsemblID) %>% separate_rows(EnsemblID) %>% unique() %>% na.omit()
genes1 <- left_join(genes1, convert, by = c("EnsemblID" = "Human.Ensembl"))
genes1 <- genes1 %>% select(Mouse.Ensembl) %>% filter(Mouse.Ensembl != "") %>% na.omit() %>% unique()
}
# Remove genes which are not in the background network - targets specifically (so we can do hypergeomtric significance testing)
genes_fi <- genes1 %>% filter(Mouse.Ensembl %in% background$target)
# Write out the result
out_text <- append(out_text, paste0("There are ", (nrow(genes) - nrow(genes_fi)), " genes of interest which are not in the background network targets."))
out_text <- append(out_text, paste0("After removing these genes there are ", nrow(genes_fi), " genes of interest."))
# First extract all the regulators of the deg list
gene_regs <- net %>% filter(target %in% genes_fi$Mouse.Ensembl) %>% select(source) %>% unique()
# Filter for targets of the master reg
master <- gene_regs %>% filter(source %in% regs)
out_text <- append(out_text, paste0("There are ", as.character(nrow(gene_regs)), " regulators in the network which target the ", as.character(nrow(genes)), " genes of interest."))
out_text <- append(out_text, paste0("There are ", nrow(master), " master regulators targetting the genes of interest."))
# Extract all targets of the master regulators
master_tars <- net %>% filter(source %in% regs) %>% select(target) %>% unique()
out_text <- append(out_text, paste0("There are ", nrow(master_tars), " targets of the master regs in the network."))
# How many of the input genes are in this target list?
master_tars_filt <- master_tars %>% filter(target %in% genes_fi$Mouse.Ensembl)
out_text <- append(out_text, paste0("There are ", nrow(master_tars_uc), " genes of interest targeted by at least one of the master regulators in the network."))
out_text <- append(out_text, paste0("There are ", nrow(master_tars), " genes of interest targeted by at least one of the master regulators in the network."))
# For the background I use all the targets in the background network
backg_targs <- background %>% select(target) %>% unique()
# Hypergeometric signi testing
sig <- 1 - phyper(nrow(master_tars_filt), nrow(master_tars), (nrow(backg_targs) - nrow(master_tars)), nrow(genes_fi))
out_text <- append(out_text, paste0(sig, " = The significance of having ", nrow(master_tars_filt), " genes of interest in the list of ", nrow(master_tars), " targets of the master regulators (in the network), given ", nrow(backg_targs), " targets in the background network."))
# Output descriptive results
write.table(out_text, paste0(out_text, "_master_reg_targets_results.txt"), row.names = F, quote = F, sep = "\t")
# Output list of genes of interest targetted by the predicted master regulators in the network
write.table(master_tars_genes, paste0(out_text, "_master_reg_targets_list.txt"), row.names = F, quote = F, sep = "\t")
# Output list of genes of interest targetted by the predicted master regulators in the network
write.table(master_tars_filt, paste0(out_text, "_master_reg_targets_list.txt"), row.names = F, quote = F, sep = "\t")
# Output descriptive results
write.table(out_text, paste0(out_text, "_master_reg_targets_results.txt"), row.names = F, quote = F, sep = "\t")
# Output descriptive results
write.table(out_text, "temp.txt", row.names = F, quote = F, sep = "\t")
# Out file path
out1 <- paste0(out_text, "_master_reg_targets_results.txt")
# Name of input list and cell type for use in output filenames
out_text_f <- "UC_degs_goblet"
# Name of input list and cell type for use in output filenames
out_text_name <- "UC_degs_goblet"
# Out file path
out1 <- paste0(out_text_name, "_master_reg_targets_results.txt")
out2 <- paste0(out_text_name, "_master_reg_targets_list.txt")
# Output descriptive results
write.table(out_text, out1, row.names = F, quote = F, sep = "\t")
# Output list of genes of interest targetted by the predicted master regulators in the network
write.table(master_tars_filt, out2, row.names = F, quote = F, sep = "\t")
library(dplyr)
library(tidyr)
# Input files
# IBD genes from Smillie et al and from Jostins et al and Farh et al. Select just one to test
#genes_f <- "../Input_data/IBD_genes/goblet_inflammed_v_healthy_smillie_tableS4.txt"
genes_f <- "../Input_data/IBD_genes/All_UC_snps.txt"
#genes_f <- "../Input_data/IBD_genes/All_CD_snps.txt"
# GceE and PCeE networks - select just the one you want to test
#net_f <- "../Input_data/Pan_network_lfc1.txt"
net_f <- "../Input_data/Gob_network_lfc1.txt"
# Human to mouse ID conversion table
convert_f <- "../Input_data/InParanoid-Mus-homo-UniprotEnsembl-May2018-expanded.txt"
# Whole unfiltered network
background_f <- "../Input_data/Known_interactions_unfiltered.txt"
# Predicted master regulators - select just one you want to test
# goblet
regs <- c("ENSMUSG00000026815", "ENSMUSG00000022346", "ENSMUSG00000032035", "ENSMUSG00000024431", "ENSMUSG00000022479")
# paneth
#regs <- c("ENSMUSG00000034957", "ENSMUSG00000052684", "ENSMUSG00000020889", "ENSMUSG00000015846", "ENSMUSG00000032035", "ENSMUSG00000024431", "ENSMUSG00000022479")
# Name of input list and cell type for use in output filenames
out_text_name <- "UC_degs_goblet"
##### Load files #####
# Load files
genes <- read.csv(genes_f, sep = "\t", header=T)
net <- read.csv(net_f, sep = "\t", header = T)
convert <- read.csv(convert_f, sep = "\t", header = T)
background <- read.csv(background_f, sep = "\t", header=T)
# Empty list to hold the output text
out_text <- c()
##### Preprocessing #####
# Expand the conversion file for one human gene symbol per line
convert_1 <- separate_rows(convert, Hum.gene.syb, sep="; ")
# Get unique list of human input genes - different for degs and snps files
if ("ident" %in% colnames(genes)) {
genes <- left_join(genes, convert, by = c("gene" = "Hum.gene.syb"))
genes1 <- genes %>% filter(Mouse.Ensembl != "-") %>%
filter(ident == "Goblet") %>% select(Mouse.Ensembl) %>%
na.omit() %>% unique()
} else {
genes1 <- genes %>% select(EnsemblID) %>% separate_rows(EnsemblID) %>% unique() %>% na.omit()
genes1 <- left_join(genes1, convert, by = c("EnsemblID" = "Human.Ensembl"))
genes1 <- genes1 %>% select(Mouse.Ensembl) %>% filter(Mouse.Ensembl != "") %>% na.omit() %>% unique()
}
# Remove genes which are not in the background network - targets specifically (so we can do hypergeomtric significance testing)
genes_fi <- genes1 %>% filter(Mouse.Ensembl %in% background$target)
# Write out the result
out_text <- append(out_text, paste0("There are ", (nrow(genes) - nrow(genes_fi)), " genes of interest which are not in the background network targets."))
out_text <- append(out_text, paste0("After removing these genes there are ", nrow(genes_fi), " genes of interest."))
##### Regulators of the DEGs #####
# First extract all the regulators of the deg list
gene_regs <- net %>% filter(target %in% genes_fi$Mouse.Ensembl) %>% select(source) %>% unique()
# Filter for targets of the master reg
master <- gene_regs %>% filter(source %in% regs)
out_text <- append(out_text, paste0("There are ", as.character(nrow(gene_regs)), " regulators in the network which target the ", as.character(nrow(genes)), " genes of interest."))
out_text <- append(out_text, paste0("There are ", nrow(master), " master regulators targetting the genes of interest."))
##### Targets of the master regulators #####
# Extract all targets of the master regulators
master_tars <- net %>% filter(source %in% regs) %>% select(target) %>% unique()
out_text <- append(out_text, paste0("There are ", nrow(master_tars), " targets of the master regs in the network."))
# How many of the input genes are in this target list?
master_tars_filt <- master_tars %>% filter(target %in% genes_fi$Mouse.Ensembl)
out_text <- append(out_text, paste0("There are ", nrow(master_tars), " genes of interest targeted by at least one of the master regulators in the network."))
##### Significance testing #####
# Significance of getting this many uc/cd/drug target associated genes in the target list of the relevant master regulators
# For the background I use all the targets in the background network
backg_targs <- background %>% select(target) %>% unique()
# Hypergeometric signi testing
sig <- 1 - phyper(nrow(master_tars_filt), nrow(master_tars), (nrow(backg_targs) - nrow(master_tars)), nrow(genes_fi))
out_text <- append(out_text, paste0(sig, " = The significance of having ", nrow(master_tars_filt), " genes of interest in the list of ", nrow(master_tars), " targets of the master regulators (in the network), given ", nrow(backg_targs), " targets in the background network."))
##### Output #####
# Out file path
out1 <- paste0(out_text_name, "_master_reg_targets_results.txt")
out2 <- paste0(out_text_name, "_master_reg_targets_list.txt")
# Output descriptive results
write.table(out_text, out1, row.names = F, quote = F, sep = "\t")
# Output list of genes of interest targetted by the predicted master regulators in the network
write.table(master_tars_filt, out2, row.names = F, quote = F, sep = "\t")
out_text_f2 <- "_targeted_by_1ormore_master_regs.txt"
